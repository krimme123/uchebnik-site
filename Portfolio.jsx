import React, { useState, useEffect } from 'react';
import './Portfolio.css';

const Portfolio = () => {
  const [works, setWorks] = useState([]);
  const [subjects, setSubjects] = useState([]);
  const [classes, setClasses] = useState([]);
  const [selectedSubject, setSelectedSubject] = useState('–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã');
  const [selectedClass, setSelectedClass] = useState('–í—Å–µ –∫–ª–∞—Å—Å—ã');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // üîß –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ ID –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô ID –¢–ê–ë–õ–ò–¶–´
  const SHEET_ID = '1MJgYwSVGXQ8HquceWa4yxxTxrPytiDmRm5gaZ0ssGCc';

  useEffect(() => {
    const fetchWorks = async () => {
      try {
        setLoading(true);
        const response = await fetch(
          `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:json`
        );
        
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        const text = await response.text();
        const json = JSON.parse(text.substring(47).slice(0, -2));
        
        const worksData = json.table.rows.map((row, index) => {
          const cells = row.c;
          return {
            id: index + 1,
            subject: cells[0]?.v || '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞',
            class: cells[1]?.v || '–ë–µ–∑ –∫–ª–∞—Å—Å–∞',
            title: cells[2]?.v || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            description: cells[3]?.v || '',
            image: cells[4]?.v || '',
            file_url: cells[5]?.v || '',
            type: cells[6]?.v || '',
            theme: cells[7]?.v || ''
          };
        });
        
        setWorks(worksData);
        
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∫–ª–∞—Å—Å—ã
        const uniqueSubjects = [...new Set(worksData.map(work => work.subject))];
        const uniqueClasses = [...new Set(worksData.map(work => work.class))];
        
        setSubjects(['–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã', ...uniqueSubjects]);
        setClasses(['–í—Å–µ –∫–ª–∞—Å—Å—ã', ...uniqueClasses]);
        setError('');
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞.');
        console.error('–û—à–∏–±–∫–∞:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchWorks();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç
  const filteredWorks = works.filter(work => {
    const subjectMatch = selectedSubject === '–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã' || work.subject === selectedSubject;
    const classMatch = selectedClass === '–í—Å–µ –∫–ª–∞—Å—Å—ã' || work.class === selectedClass;
    return subjectMatch && classMatch;
  });

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
  const groupedWorks = filteredWorks.reduce((acc, work) => {
    if (!acc[work.subject]) {
      acc[work.subject] = [];
    }
    acc[work.subject].push(work);
    return acc;
  }, {});

  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç
  const getTypeIcon = (type) => {
    const icons = {
      '–ø—Ä–æ–µ–∫—Ç': 'üìä',
      '–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è': 'üìù',
      '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ': 'üî¨',
      '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è': 'üîß',
      '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è': '‚öóÔ∏è',
      '—Ä–µ—Ñ–µ—Ä–∞—Ç': 'üìÑ'
    };
    return icons[type] || 'üìÅ';
  };

  if (loading) {
    return (
      <div className="loading">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="error">
        <p>{error}</p>
        <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–¥–µ Portfolio.jsx</small>
      </div>
    );
  }

  return (
    <div className="portfolio">
      <h1>üìö –£—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</h1>
      
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="filters">
        <select 
          value={selectedSubject} 
          onChange={(e) => setSelectedSubject(e.target.value)}
        >
          {subjects.map(subject => (
            <option key={subject} value={subject}>{subject}</option>
          ))}
        </select>
        
        <select 
          value={selectedClass} 
          onChange={(e) => setSelectedClass(e.target.value)}
        >
          {classes.map(className => (
            <option key={className} value={className}>{className}</option>
          ))}
        </select>
      </div>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç */}
      <div className="works-container">
        {Object.keys(groupedWorks).length === 0 ? (
          <p className="no-works">–ù–µ—Ç —Ä–∞–±–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</p>
        ) : (
          Object.entries(groupedWorks).map(([subject, subjectWorks]) => (
            <div key={subject} className="subject-section">
              <h2 className="subject-title">{subject}</h2>
              <div className="works-grid">
                {subjectWorks.map(work => (
                  <div key={work.id} className="work-card">
                    <div className="work-content">
                      <div className="work-meta">
                        <span className="class-badge">{work.class} –∫–ª–∞—Å—Å</span>
                        <span className="type-badge">
                          {getTypeIcon(work.type)} {work.type}
                        </span>
                      </div>
                      
                      <h3>{work.title}</h3>
                      <p className="description">{work.description}</p>
                      
                      {work.theme && (
                        <div className="theme">
                          <strong>–¢–µ–º–∞:</strong> {work.theme}
                        </div>
                      )}
                      
                      <div className="work-actions">
                        {work.file_url && (
                          <a 
                            href={work.file_url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="download-btn"
                          >
                            üì• –°–∫–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                          </a>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default Portfolio;
